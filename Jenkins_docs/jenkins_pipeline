pipeline {
  agent any
  stages {

    stage('Checkout: Code') {
      steps {
        checkout([$class: 'GitSCM',
        branches: [[name: '*/master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'RelativeTargetDirectory',
            relativeTargetDir: 'cookbook']],
        submoduleCfg: [],
        userRemoteConfigs: [[credentialsId: 'b6dd6bd7-e556-44af-9763-375190d4afb6', url: 'https://git.autodesk.com/dpe/chef-cookbook-test.git']]
        ])
        sh "cd cookbook"
      }
    }

    stage('chef test') {

      steps {
          parallel(
          "Chef Cookbook Unit": {
            chef_cookbook_unit()
          },
          "Chef Cookbook Lint": {
            chef_cookbook_foodcritic()
            chef_cookbook_cookstyle()
          }
        )

      }
    }
    stage('functional test') {
      steps {
        dir('cookbook') {
        script {
        sh "chown -R jenkins:jenkins ."
        chef_cookbook_functional()
        }
      }
    }
    }
    stage('Upload to server') {
      steps {
        dir('cookbook') {
        script {
            if (fileExists('Berksfile.lock')  ) {
               sh "berks update"
            }
            else {
               sh "berks install" 
            }
            sh "berks upload  >> berks_output "
            if (readFile('berks_output').contains('frozen')) {
               input('cookbook is frozen. Do you want to proceed with --force option ?')
               sh "berks upload --force"
            }
            
        }
      }
      }
    }
  }
  post { 
        always { 
            deleteDir()
        }
    }

}